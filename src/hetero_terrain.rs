// translation of https://github.com/blender/blender/blob/594f47ecd2d5367ca936cf6fc6ec8168c2b360d0/source/blender/blenlib/intern/noise.c#L1462
// from c to rust

const hash: [usize; 512] = [
    0xA2, 0xA0, 0x19, 0x3B, 0xF8, 0xEB, 0xAA, 0xEE, 0xF3, 0x1C, 0x67, 0x28, 0x1D, 0xED, 0x0, 0xDE,
    0x95, 0x2E, 0xDC, 0x3F, 0x3A, 0x82, 0x35, 0x4D, 0x6C, 0xBA, 0x36, 0xD0, 0xF6, 0xC, 0x79, 0x32,
    0xD1, 0x59, 0xF4, 0x8, 0x8B, 0x63, 0x89, 0x2F, 0xB8, 0xB4, 0x97, 0x83, 0xF2, 0x8F, 0x18, 0xC7,
    0x51, 0x14, 0x65, 0x87, 0x48, 0x20, 0x42, 0xA8, 0x80, 0xB5, 0x40, 0x13, 0xB2, 0x22, 0x7E, 0x57,
    0xBC, 0x7F, 0x6B, 0x9D, 0x86, 0x4C, 0xC8, 0xDB, 0x7C, 0xD5, 0x25, 0x4E, 0x5A, 0x55, 0x74, 0x50,
    0xCD, 0xB3, 0x7A, 0xBB, 0xC3, 0xCB, 0xB6, 0xE2, 0xE4, 0xEC, 0xFD, 0x98, 0xB, 0x96, 0xD3, 0x9E,
    0x5C, 0xA1, 0x64, 0xF1, 0x81, 0x61, 0xE1, 0xC4, 0x24, 0x72, 0x49, 0x8C, 0x90, 0x4B, 0x84, 0x34,
    0x38, 0xAB, 0x78, 0xCA, 0x1F, 0x1, 0xD7, 0x93, 0x11, 0xC1, 0x58, 0xA9, 0x31, 0xF9, 0x44, 0x6D,
    0xBF, 0x33, 0x9C, 0x5F, 0x9, 0x94, 0xA3, 0x85, 0x6, 0xC6, 0x9A, 0x1E, 0x7B, 0x46, 0x15, 0x30,
    0x27, 0x2B, 0x1B, 0x71, 0x3C, 0x5B, 0xD6, 0x6F, 0x62, 0xAC, 0x4F, 0xC2, 0xC0, 0xE, 0xB1, 0x23,
    0xA7, 0xDF, 0x47, 0xB0, 0x77, 0x69, 0x5, 0xE9, 0xE6, 0xE7, 0x76, 0x73, 0xF, 0xFE, 0x6E, 0x9B,
    0x56, 0xEF, 0x12, 0xA5, 0x37, 0xFC, 0xAE, 0xD9, 0x3, 0x8E, 0xDD, 0x10, 0xB9, 0xCE, 0xC9, 0x8D,
    0xDA, 0x2A, 0xBD, 0x68, 0x17, 0x9F, 0xBE, 0xD4, 0xA, 0xCC, 0xD2, 0xE8, 0x43, 0x3D, 0x70, 0xB7,
    0x2, 0x7D, 0x99, 0xD8, 0xD, 0x60, 0x8A, 0x4, 0x2C, 0x3E, 0x92, 0xE5, 0xAF, 0x53, 0x7, 0xE0,
    0x29, 0xA6, 0xC5, 0xE3, 0xF5, 0xF7, 0x4A, 0x41, 0x26, 0x6A, 0x16, 0x5E, 0x52, 0x2D, 0x21, 0xAD,
    0xF0, 0x91, 0xFF, 0xEA, 0x54, 0xFA, 0x66, 0x1A, 0x45, 0x39, 0xCF, 0x75, 0xA4, 0x88, 0xFB, 0x5D,
    0xA2, 0xA0, 0x19, 0x3B, 0xF8, 0xEB, 0xAA, 0xEE, 0xF3, 0x1C, 0x67, 0x28, 0x1D, 0xED, 0x0, 0xDE,
    0x95, 0x2E, 0xDC, 0x3F, 0x3A, 0x82, 0x35, 0x4D, 0x6C, 0xBA, 0x36, 0xD0, 0xF6, 0xC, 0x79, 0x32,
    0xD1, 0x59, 0xF4, 0x8, 0x8B, 0x63, 0x89, 0x2F, 0xB8, 0xB4, 0x97, 0x83, 0xF2, 0x8F, 0x18, 0xC7,
    0x51, 0x14, 0x65, 0x87, 0x48, 0x20, 0x42, 0xA8, 0x80, 0xB5, 0x40, 0x13, 0xB2, 0x22, 0x7E, 0x57,
    0xBC, 0x7F, 0x6B, 0x9D, 0x86, 0x4C, 0xC8, 0xDB, 0x7C, 0xD5, 0x25, 0x4E, 0x5A, 0x55, 0x74, 0x50,
    0xCD, 0xB3, 0x7A, 0xBB, 0xC3, 0xCB, 0xB6, 0xE2, 0xE4, 0xEC, 0xFD, 0x98, 0xB, 0x96, 0xD3, 0x9E,
    0x5C, 0xA1, 0x64, 0xF1, 0x81, 0x61, 0xE1, 0xC4, 0x24, 0x72, 0x49, 0x8C, 0x90, 0x4B, 0x84, 0x34,
    0x38, 0xAB, 0x78, 0xCA, 0x1F, 0x1, 0xD7, 0x93, 0x11, 0xC1, 0x58, 0xA9, 0x31, 0xF9, 0x44, 0x6D,
    0xBF, 0x33, 0x9C, 0x5F, 0x9, 0x94, 0xA3, 0x85, 0x6, 0xC6, 0x9A, 0x1E, 0x7B, 0x46, 0x15, 0x30,
    0x27, 0x2B, 0x1B, 0x71, 0x3C, 0x5B, 0xD6, 0x6F, 0x62, 0xAC, 0x4F, 0xC2, 0xC0, 0xE, 0xB1, 0x23,
    0xA7, 0xDF, 0x47, 0xB0, 0x77, 0x69, 0x5, 0xE9, 0xE6, 0xE7, 0x76, 0x73, 0xF, 0xFE, 0x6E, 0x9B,
    0x56, 0xEF, 0x12, 0xA5, 0x37, 0xFC, 0xAE, 0xD9, 0x3, 0x8E, 0xDD, 0x10, 0xB9, 0xCE, 0xC9, 0x8D,
    0xDA, 0x2A, 0xBD, 0x68, 0x17, 0x9F, 0xBE, 0xD4, 0xA, 0xCC, 0xD2, 0xE8, 0x43, 0x3D, 0x70, 0xB7,
    0x2, 0x7D, 0x99, 0xD8, 0xD, 0x60, 0x8A, 0x4, 0x2C, 0x3E, 0x92, 0xE5, 0xAF, 0x53, 0x7, 0xE0,
    0x29, 0xA6, 0xC5, 0xE3, 0xF5, 0xF7, 0x4A, 0x41, 0x26, 0x6A, 0x16, 0x5E, 0x52, 0x2D, 0x21, 0xAD,
    0xF0, 0x91, 0xFF, 0xEA, 0x54, 0xFA, 0x66, 0x1A, 0x45, 0x39, 0xCF, 0x75, 0xA4, 0x88, 0xFB, 0x5D,
];

fn lerp(t: f32, a: f32, b: f32) -> f32 {
    a + t * (b - a)
}

fn grad(hash_val: usize, x: f32, y: f32, z: f32) -> f32 {
    let h = hash_val & 15; /* CONVERT LO 4 BITS OF HASH CODE */
    let u: f32 = if h < 8 { x } else { y }; /* INTO 12 GRADIENT DIRECTIONS. */
    let v: f32 = if h < 4 {
        y
    } else if h == 12 || h == 14 {
        x
    } else {
        z
    };
    (if (h & 1) == 0 { u } else { -u }) + (if (h & 2) == 0 { v } else { -v })
}

fn npfade(t: f32) -> f32 {
    t * t * t * (t * (t * 6.0 - 15.0) + 10.0)
}

/* instead of adding another permutation array, just use hash table defined above */
fn new_perlin(xi: f32, yi: f32, zi: f32) -> f32 {
    let (mut x, mut y, mut z) = (xi, yi, zi);
    let mut u: f32 = x.floor();
    let mut v: f32 = y.floor();
    let mut w: f32 = z.floor();
    let X = ((u as i32) & 255) as usize;
    let Y = ((v as i32) & 255) as usize;
    let Z = ((w as i32) & 255) as usize; /* FIND UNIT CUBE THAT CONTAINS POINT */
    x -= u; /* FIND RELATIVE X,Y,Z */
    y -= v; /* OF POINT IN CUBE. */
    z -= w;
    u = npfade(x); /* COMPUTE FADE CURVES */
    v = npfade(y); /* FOR EACH OF X,Y,Z. */
    w = npfade(z);
    let A: usize = (hash[X] + Y) as usize;
    let AA: usize = hash[A] + Z;
    let AB: usize = hash[A + 1] + Z; /* HASH COORDINATES OF */
    let B: usize = hash[X + 1] + Y;
    let BA: usize = hash[B] + Z;
    let BB: usize = hash[B + 1] + Z; /* THE 8 CUBE CORNERS, */
    lerp(
        w,
        lerp(
            v,
            lerp(
                u,
                grad(hash[AA], x, y, z), /* AND ADD */
                grad(hash[BA], x - 1.0, y, z),
            ), /* BLENDED */
            lerp(
                u,
                grad(hash[AB], x, y - 1.0, z), /* RESULTS */
                grad(hash[BB], x - 1.0, y - 1.0, z),
            ),
        ), /* FROM  8 */
        lerp(
            v,
            lerp(
                u,
                grad(hash[AA + 1], x, y, z - 1.0), /* CORNERS */
                grad(hash[BA + 1], x - 1.0, y, z - 1.0),
            ), /* OF CUBE */
            lerp(
                u,
                grad(hash[AB + 1], x, y - 1.0, z - 1.0),
                grad(hash[BB + 1], x - 1.0, y - 1.0, z - 1.0),
            ),
        ),
    )
}

fn noisefunc(x: f32, y: f32, z: f32) -> f32 {
    new_perlin(x, y, z)
}

pub fn hetero_terrain_new_perlin(
    xi: f32,
    yi: f32,
    zi: f32,
    H: f32,
    lacunarity: f32,
    octaves: f32,
    offset: f32,
    noisebasis: i32,
) -> f32 {
    let pwHL = lacunarity.powf(-H);
    let (mut x, mut y, mut z) = (xi, yi, zi);

    let mut pwr = pwHL; /* starts with i=1 instead of 0 */
    let mut value = offset + noisefunc(x, y, z);
    x *= lacunarity;
    y *= lacunarity;
    z *= lacunarity;
    for i in 1..(octaves as i32) {
        let increment = (noisefunc(x, y, z) + offset) * pwr * value;
        value += increment;
        pwr *= pwHL;
        x *= lacunarity;
        y *= lacunarity;
        z *= lacunarity;
    }
    let rmd: f32 = octaves - octaves.floor();
    if rmd != 0.0 {
        let increment = (noisefunc(x, y, z) + offset) * pwr * value;
        value += rmd * increment;
    }
    value
}
